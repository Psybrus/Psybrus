/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class LightweightDatabaseServer : PluginInterface2 {
  private HandleRef swigCPtr;

  internal LightweightDatabaseServer(IntPtr cPtr, bool cMemoryOwn) : base(RakNetPINVOKE.LightweightDatabaseServerUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(LightweightDatabaseServer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~LightweightDatabaseServer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.delete_LightweightDatabaseServer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public LightweightDatabaseServer() : this(RakNetPINVOKE.new_LightweightDatabaseServer(), true) {
  }

  public Table GetTable(string tableName) {
    IntPtr cPtr = RakNetPINVOKE.LightweightDatabaseServer_GetTable(swigCPtr, tableName);
    Table ret = (cPtr == IntPtr.Zero) ? null : new Table(cPtr, false);
    return ret;
  }

  public Table AddTable(string tableName, bool allowRemoteQuery, bool allowRemoteUpdate, bool allowRemoteRemove, string queryPassword, string updatePassword, string removePassword, bool oneRowPerSystemAddress, bool onlyUpdateOwnRows, bool removeRowOnPingFailure, bool removeRowOnDisconnect, bool autogenerateRowIDs) {
    IntPtr cPtr = RakNetPINVOKE.LightweightDatabaseServer_AddTable(swigCPtr, tableName, allowRemoteQuery, allowRemoteUpdate, allowRemoteRemove, queryPassword, updatePassword, removePassword, oneRowPerSystemAddress, onlyUpdateOwnRows, removeRowOnPingFailure, removeRowOnDisconnect, autogenerateRowIDs);
    Table ret = (cPtr == IntPtr.Zero) ? null : new Table(cPtr, false);
    return ret;
  }

  public bool RemoveTable(string tableName) {
    bool ret = RakNetPINVOKE.LightweightDatabaseServer_RemoveTable(swigCPtr, tableName);
    return ret;
  }

  public void Clear() {
    RakNetPINVOKE.LightweightDatabaseServer_Clear(swigCPtr);
  }

  public uint GetAndIncrementRowID(string tableName) {
    uint ret = RakNetPINVOKE.LightweightDatabaseServer_GetAndIncrementRowID(swigCPtr, tableName);
    return ret;
  }

  public RakNetPageRow GetTableRows(string tableName) {
    IntPtr cPtr = RakNetPINVOKE.LightweightDatabaseServer_GetTableRows(swigCPtr, tableName);
    RakNetPageRow ret = (cPtr == IntPtr.Zero) ? null : new RakNetPageRow(cPtr, false);
    return ret;
  }

  public static int DatabaseTableComp(string key1, string key2) {
    int ret = RakNetPINVOKE.LightweightDatabaseServer_DatabaseTableComp(key1, key2);
    return ret;
  }

}
