/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class LightweightDatabaseClient : PluginInterface2 {
  private HandleRef swigCPtr;

  internal LightweightDatabaseClient(IntPtr cPtr, bool cMemoryOwn) : base(RakNetPINVOKE.LightweightDatabaseClientUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(LightweightDatabaseClient obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~LightweightDatabaseClient() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.delete_LightweightDatabaseClient(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }
	

	public void QueryTable(string tableName, string queryPassword, string[] columnNamesSubset, byte numColumnSubset, DatabaseFilter [] filter, byte numFilters, uint[] rowIds, byte numRowIDs, SystemAddress systemAddress, bool broadcast)
   	{
		RakNetListDatabaseFilter filtersList =null;
		if (filter!=null)
		{
			filtersList = new RakNetListDatabaseFilter();
			int listLen = filter.Length;
			for (int i = 0; i < listLen; i++)
			{
     	 		    filtersList.Insert(filter[i], "", 1);
			}
		}
		QueryTableHelper(tableName, queryPassword, columnNamesSubset, numColumnSubset, filtersList, numFilters, rowIds, numRowIDs, systemAddress, broadcast);
	}

	public void UpdateRow(string tableName, string updatePassword, RowUpdateMode updateMode, bool hasRowId, uint rowId, DatabaseCellUpdate [] cellUpdates, byte numCellUpdates, SystemAddress systemAddress, bool broadcast)
  	{
		RakNetListDatabaseCellUpdate cellUpdateList =null;
		if (cellUpdates!=null)
		{
			cellUpdateList = new RakNetListDatabaseCellUpdate();
			int listLen = cellUpdates.Length;
			for (int i = 0; i < listLen; i++)
			{
     	 		    cellUpdateList.Insert(cellUpdates[i], "", 1);
			}
		}
		UpdateRowHelper(tableName, updatePassword, updateMode, hasRowId, rowId, cellUpdateList, numCellUpdates, systemAddress, broadcast);
	
	}


  public LightweightDatabaseClient() : this(RakNetPINVOKE.new_LightweightDatabaseClient(), true) {
  }

  public void RemoveRow(string tableName, string removePassword, uint rowId, SystemAddress systemAddress, bool broadcast) {
    RakNetPINVOKE.LightweightDatabaseClient_RemoveRow(swigCPtr, tableName, removePassword, rowId, SystemAddress.getCPtr(systemAddress), broadcast);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  private void QueryTableHelper(string tableName, string queryPassword, string[] columnNamesSubset, byte numColumnSubset, RakNetListDatabaseFilter filter, byte numFilters, uint[] rowIds, byte numRowIDs, SystemAddress systemAddress, bool broadcast) {
    RakNetPINVOKE.LightweightDatabaseClient_QueryTableHelper(swigCPtr, tableName, queryPassword, columnNamesSubset, numColumnSubset, RakNetListDatabaseFilter.getCPtr(filter), numFilters, rowIds, numRowIDs, SystemAddress.getCPtr(systemAddress), broadcast);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  private void UpdateRowHelper(string tableName, string updatePassword, RowUpdateMode updateMode, bool hasRowId, uint rowId, RakNetListDatabaseCellUpdate cellUpdates, byte numCellUpdates, SystemAddress systemAddress, bool broadcast) {
    RakNetPINVOKE.LightweightDatabaseClient_UpdateRowHelper(swigCPtr, tableName, updatePassword, (int)updateMode, hasRowId, rowId, RakNetListDatabaseCellUpdate.getCPtr(cellUpdates), numCellUpdates, SystemAddress.getCPtr(systemAddress), broadcast);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

}
