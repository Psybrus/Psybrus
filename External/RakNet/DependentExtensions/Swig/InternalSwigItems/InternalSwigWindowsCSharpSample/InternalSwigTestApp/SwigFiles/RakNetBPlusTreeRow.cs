/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNet {

using System;
using System.Runtime.InteropServices;

public class RakNetBPlusTreeRow : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RakNetBPlusTreeRow(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RakNetBPlusTreeRow obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RakNetBPlusTreeRow() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.delete_RakNetBPlusTreeRow(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public RakNetBPlusTreeRow() : this(RakNetPINVOKE.new_RakNetBPlusTreeRow(), true) {
  }

  public void SetPoolPageSize(int size) {
    RakNetPINVOKE.RakNetBPlusTreeRow_SetPoolPageSize(swigCPtr, size);
  }

  public bool Insert(uint key, Row data) {
    bool ret = RakNetPINVOKE.RakNetBPlusTreeRow_Insert(swigCPtr, key, Row.getCPtr(data));
    return ret;
  }

  public void Clear() {
    RakNetPINVOKE.RakNetBPlusTreeRow_Clear(swigCPtr);
  }

  public uint Size() {
    uint ret = RakNetPINVOKE.RakNetBPlusTreeRow_Size(swigCPtr);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = RakNetPINVOKE.RakNetBPlusTreeRow_IsEmpty(swigCPtr);
    return ret;
  }

  public RakNetPageRow GetListHead() {
    IntPtr cPtr = RakNetPINVOKE.RakNetBPlusTreeRow_GetListHead(swigCPtr);
    RakNetPageRow ret = (cPtr == IntPtr.Zero) ? null : new RakNetPageRow(cPtr, false);
    return ret;
  }

  public Row GetDataHead() {
    IntPtr cPtr = RakNetPINVOKE.RakNetBPlusTreeRow_GetDataHead(swigCPtr);
    Row ret = (cPtr == IntPtr.Zero) ? null : new Row(cPtr, false);
    return ret;
  }

  public void PrintLeaves() {
    RakNetPINVOKE.RakNetBPlusTreeRow_PrintLeaves(swigCPtr);
  }

  public void PrintGraph() {
    RakNetPINVOKE.RakNetBPlusTreeRow_PrintGraph(swigCPtr);
  }

}

}
