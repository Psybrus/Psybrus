/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNet {

using System;
using System.Runtime.InteropServices;

public class TeamBalancer : PluginInterface2 {
  private HandleRef swigCPtr;

  internal TeamBalancer(IntPtr cPtr, bool cMemoryOwn) : base(RakNetPINVOKE.TeamBalancer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(TeamBalancer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TeamBalancer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.delete_TeamBalancer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static TeamBalancer GetInstance() {
    IntPtr cPtr = RakNetPINVOKE.TeamBalancer_GetInstance();
    TeamBalancer ret = (cPtr == IntPtr.Zero) ? null : new TeamBalancer(cPtr, false);
    return ret;
  }

  public static void DestroyInstance(TeamBalancer i) {
    RakNetPINVOKE.TeamBalancer_DestroyInstance(TeamBalancer.getCPtr(i));
  }

  public TeamBalancer() : this(RakNetPINVOKE.new_TeamBalancer(), true) {
  }

  public void SetTeamSizeLimit(byte team, ushort limit) {
    RakNetPINVOKE.TeamBalancer_SetTeamSizeLimit(swigCPtr, team, limit);
  }

  public void SetDefaultAssignmentAlgorithm(TeamBalancer.DefaultAssigmentAlgorithm daa) {
    RakNetPINVOKE.TeamBalancer_SetDefaultAssignmentAlgorithm(swigCPtr, (int)daa);
  }

  public void SetForceEvenTeams(bool force) {
    RakNetPINVOKE.TeamBalancer_SetForceEvenTeams(swigCPtr, force);
  }

  public void SetLockTeams(bool arg0) {
    RakNetPINVOKE.TeamBalancer_SetLockTeams(swigCPtr, arg0);
  }

  public void RequestSpecificTeam(ulong memberId, byte desiredTeam) {
    RakNetPINVOKE.TeamBalancer_RequestSpecificTeam(swigCPtr, memberId, desiredTeam);
  }

  public void CancelRequestSpecificTeam(ulong memberId) {
    RakNetPINVOKE.TeamBalancer_CancelRequestSpecificTeam(swigCPtr, memberId);
  }

  public void RequestAnyTeam(ulong memberId) {
    RakNetPINVOKE.TeamBalancer_RequestAnyTeam(swigCPtr, memberId);
  }

  public byte GetMyTeam(ulong memberId) {
    byte ret = RakNetPINVOKE.TeamBalancer_GetMyTeam(swigCPtr, memberId);
    return ret;
  }

  public void DeleteMember(ulong memberId) {
    RakNetPINVOKE.TeamBalancer_DeleteMember(swigCPtr, memberId);
  }

  public enum DefaultAssigmentAlgorithm {
    SMALLEST_TEAM,
    FILL_IN_ORDER
  }

}

}
