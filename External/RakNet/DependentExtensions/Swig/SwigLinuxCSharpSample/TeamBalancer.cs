/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNet {

using System;
using System.Runtime.InteropServices;

public class TeamBalancer : PluginInterface2 {
  private HandleRef swigCPtr;

  internal TeamBalancer(IntPtr cPtr, bool cMemoryOwn) : base(RakNetPINVOKE.TeamBalancerUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(TeamBalancer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TeamBalancer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.delete_TeamBalancer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static TeamBalancer GetInstance() {
    IntPtr cPtr = RakNetPINVOKE.TeamBalancer_GetInstance();
    TeamBalancer ret = (cPtr == IntPtr.Zero) ? null : new TeamBalancer(cPtr, false);
    return ret;
  }

  public static void DestroyInstance(TeamBalancer i) {
    RakNetPINVOKE.TeamBalancer_DestroyInstance(TeamBalancer.getCPtr(i));
  }

  public TeamBalancer() : this(RakNetPINVOKE.new_TeamBalancer(), true) {
  }

  public void SetHostGuid(RakNetGUID _hostGuid) {
    RakNetPINVOKE.TeamBalancer_SetHostGuid(swigCPtr, RakNetGUID.getCPtr(_hostGuid));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTeamSizeLimits(RakNetListUnsignedShort _teamLimits) {
    RakNetPINVOKE.TeamBalancer_SetTeamSizeLimits__SWIG_0(swigCPtr, RakNetListUnsignedShort.getCPtr(_teamLimits));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTeamSizeLimits(ushort[] values, int valuesLength) {
    RakNetPINVOKE.TeamBalancer_SetTeamSizeLimits__SWIG_1(swigCPtr, values, valuesLength);
  }

  public void SetDefaultAssignmentAlgorithm(TeamBalancer.DefaultAssigmentAlgorithm daa) {
    RakNetPINVOKE.TeamBalancer_SetDefaultAssignmentAlgorithm(swigCPtr, (int)daa);
  }

  public void SetForceEvenTeams(bool force) {
    RakNetPINVOKE.TeamBalancer_SetForceEvenTeams(swigCPtr, force);
  }

  public void SetLockTeams(bool arg0) {
    RakNetPINVOKE.TeamBalancer_SetLockTeams(swigCPtr, arg0);
  }

  public bool RequestSpecificTeam(byte desiredTeam) {
    bool ret = RakNetPINVOKE.TeamBalancer_RequestSpecificTeam(swigCPtr, desiredTeam);
    return ret;
  }

  public void CancelRequestSpecificTeam() {
    RakNetPINVOKE.TeamBalancer_CancelRequestSpecificTeam(swigCPtr);
  }

  public void RequestAnyTeam() {
    RakNetPINVOKE.TeamBalancer_RequestAnyTeam(swigCPtr);
  }

  public byte GetMyTeam() {
    byte ret = RakNetPINVOKE.TeamBalancer_GetMyTeam(swigCPtr);
    return ret;
  }

  public void SetAllowHostMigration(bool allow) {
    RakNetPINVOKE.TeamBalancer_SetAllowHostMigration(swigCPtr, allow);
  }

  public enum DefaultAssigmentAlgorithm {
    SMALLEST_TEAM,
    FILL_IN_ORDER
  }

}

}
