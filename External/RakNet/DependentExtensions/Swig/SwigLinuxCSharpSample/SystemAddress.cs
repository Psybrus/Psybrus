/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNet {

using System;
using System.Runtime.InteropServices;
#pragma warning disable 0660

public class SystemAddress : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SystemAddress(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SystemAddress obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SystemAddress() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.delete_SystemAddress(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }


	public override int GetHashCode()
	{    
		return (int)((this.port+this.binaryAddress)% int.MaxValue);
	}
	public static bool operator ==(SystemAddress a, SystemAddress b)
	{
 	   	// If both are null, or both are same instance, return true.
 		if (System.Object.ReferenceEquals(a, b))
 		{
 	       		return true;
 	   	}

  		// If one is null, but not both, return false.
   	 	if (((object)a == null) || ((object)b == null))
    		{
       		 	return false;
    		}

		    return a.Equals(b);//Equals should be overloaded as well
	}

	public static bool operator !=(SystemAddress a, SystemAddress b)
	{
   		 return a.OpNotEqual(b);
	}

	public static bool operator < (SystemAddress a, SystemAddress b)
	{
    		return a.OpLess(b);
	}

	public static bool operator >(SystemAddress a, SystemAddress b)
	{
		return a.OpGreater(b);
	}

	public static bool operator <=(SystemAddress a, SystemAddress b)
	{
		return (a.OpLess(b) || a==b);
	}

	public static bool operator >=(SystemAddress a, SystemAddress b)
	{
		return (a.OpGreater(b) || a==b);
	}

	public override string ToString()
	{
		return ToString(true);
	}

	public void ToString(bool writePort,out string dest)
	{
		dest=ToString(writePort);
	}

  public SystemAddress() : this(RakNetPINVOKE.new_SystemAddress__SWIG_0(), true) {
  }

  public SystemAddress(string a, ushort b) : this(RakNetPINVOKE.new_SystemAddress__SWIG_1(a, b), true) {
  }

  public SystemAddress(uint a, ushort b) : this(RakNetPINVOKE.new_SystemAddress__SWIG_2(a, b), true) {
  }

  public uint binaryAddress {
    set {
      RakNetPINVOKE.SystemAddress_binaryAddress_set(swigCPtr, value);
    } 
    get {
      uint ret = RakNetPINVOKE.SystemAddress_binaryAddress_get(swigCPtr);
      return ret;
    } 
  }

  public ushort port {
    set {
      RakNetPINVOKE.SystemAddress_port_set(swigCPtr, value);
    } 
    get {
      ushort ret = RakNetPINVOKE.SystemAddress_port_get(swigCPtr);
      return ret;
    } 
  }

  public ushort systemIndex {
    set {
      RakNetPINVOKE.SystemAddress_systemIndex_set(swigCPtr, value);
    } 
    get {
      ushort ret = RakNetPINVOKE.SystemAddress_systemIndex_get(swigCPtr);
      return ret;
    } 
  }

  public static int size() {
    int ret = RakNetPINVOKE.SystemAddress_size();
    return ret;
  }

  public string ToString(bool writePort) {
    string ret = RakNetPINVOKE.SystemAddress_ToString(swigCPtr, writePort);
    return ret;
  }

  public void SetBinaryAddress(string str) {
    RakNetPINVOKE.SystemAddress_SetBinaryAddress(swigCPtr, str);
  }

  public SystemAddress CopyData(SystemAddress input) {
    SystemAddress ret = new SystemAddress(RakNetPINVOKE.SystemAddress_CopyData(swigCPtr, SystemAddress.getCPtr(input)), false);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(SystemAddress right) {
    bool ret = RakNetPINVOKE.SystemAddress_Equals(swigCPtr, SystemAddress.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool OpNotEqual(SystemAddress right) {
    bool ret = RakNetPINVOKE.SystemAddress_OpNotEqual(swigCPtr, SystemAddress.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool OpGreater(SystemAddress right) {
    bool ret = RakNetPINVOKE.SystemAddress_OpGreater(swigCPtr, SystemAddress.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool OpLess(SystemAddress right) {
    bool ret = RakNetPINVOKE.SystemAddress_OpLess(swigCPtr, SystemAddress.getCPtr(right));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
